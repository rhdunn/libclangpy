#!/usr/bin/python

# Copyright (C) 2014 Reece H. Dunn
#
# This file is part of libclangpy.
#
# libclangpy is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# libclangpy is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with libclangpy.  If not, see <http://www.gnu.org/licenses/>.

import sys

import libclang

def print_type(t, level=0, indentation='... ', cursors=set(), ctx=''):
	if t.kind == libclang.TypeKind.INVALID:
		return
	sys.stdout.write('{0}{1}'.format(level * indentation, ctx))
	sys.stdout.write('[{0}|{1}]'.format(t.kind.value, t.kind))
	try:
		sys.stdout.write(' "{0}"'.format(t.spelling))
	except libclang.MissingFunction:
		pass
	if t.canonical_type != t:
		kind = t.canonical_type.kind
		sys.stdout.write(' canonical=[{0}|{1}]'.format(kind.value, kind))
	if t.pointee_type != t and t.pointee_type.kind != libclang.TypeKind.INVALID:
		kind = t.pointee_type.kind
		sys.stdout.write(' pointee=[{0}|{1}]'.format(kind.value, kind))
	if t.result_type != t and t.result_type.kind != libclang.TypeKind.INVALID:
		kind = t.result_type.kind
		sys.stdout.write(' result=[{0}|{1}]'.format(kind.value, kind))
	if t.declaration.kind != libclang.CursorKind.NO_DECL_FOUND:
		sys.stdout.write(' decl="{0}"@{1}'.format(t.declaration.spelling, hash(t.declaration)))
	sys.stdout.write('\n')

def print_cursor(c, level=0, indentation='... ', cursors=set(), print_types=False):
	sys.stdout.write(level * indentation)
	sys.stdout.write('[{0}|{1}]'.format(c.kind.value, c.kind))
	sys.stdout.write(' "{0}"@{1}'.format(c.spelling, hash(c)))
	if c.referenced != c:
		sys.stdout.write(' ref="{0}"@{1}'.format(c.referenced.spelling, hash(c.referenced)))
	if c.definition != c:
		sys.stdout.write(' def="{0}"@{1}'.format(c.definition.spelling, hash(c.definition)))
	sys.stdout.write('\n')
	if print_types:
		print_type(c.type, level=level, indentation=indentation, cursors=cursors, ctx='|=> ')
	if not c in cursors:
		for child in c.children:
			print_cursor(child, level=level+1, indentation=indentation, cursors=cursors, print_types=print_types)
	cursors.add(c)

def should_print_cursor(c, tu, restrict_to_input_file):
	if restrict_to_input_file:
		return c.location.file == tu.spelling
	return True

try:
	clang_args = sys.argv[sys.argv.index('--')+1:]
	argv = sys.argv[1:sys.argv.index('--')]
except:
	clang_args = []
	argv = sys.argv[1:]

args = []
filenames = []
libclangpath = None
is_libclang_arg = False
for arg in argv:
	if is_libclang_arg:
		libclangpath = arg
		is_libclang_arg = False
	elif arg.startswith('--'):
		if arg == '--libclang':
			is_libclang_arg = True
		else:
			args.append(arg)
	elif arg == '-':
		pass
	else:
		filenames.append(arg)

if len(filenames) == 0:
	if '-std=c98' in clang_args or '-std=c99' in clang_args:
		filenames.append('stdin.c')
		unsaved_files = [('stdin.c', sys.stdin.read())]
	else:
		filenames.append('stdin.cpp')
		unsaved_files = [('stdin.cpp', sys.stdin.read())]
else:
	unsaved_files = []

restrict_to_input_file = '--only-input-file' in args
print_types = '--print-types' in args

if libclangpath:
	libclang.load(name=libclangpath)
else:
	libclang.load()

index = libclang.Index()

for filename in filenames:
	tu = index.parse(filename, args=clang_args, unsaved_files=unsaved_files)
	for diagnostic in tu.diagnostics:
		print(diagnostic.format())

	for child in tu.cursor().children:
		if should_print_cursor(child, tu, restrict_to_input_file):
			print_cursor(child, print_types=print_types)
